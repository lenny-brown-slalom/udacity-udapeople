version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0

executors:
  node_executor:
    docker:
      - image: cimg/node:17.1.0

commands:
  # Exercise - Rollback
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udacity-udapeople-${CIRCLE_WORKFLOW_ID:0:5}

jobs:
  install:
    executor: node_executor
    steps:
      - checkout
      - run:
          name: "Install our react app deps"
          command: npm install
      - save_cache:
          key: v1-npm-packages
          paths:
            - ./node_modules
  
  test:
    executor: node_executor
    steps:
      - checkout
      - restore_cache:
          key: v1-npm-packages
      - run: npm run test -- --watchAll=false

  create_infrastructure: 
      executor: aws-cli/default
      steps:
        - checkout
        - aws-cli/setup
        - run:
            name: "create cloudformation stack - cfn-template.yml"
            command: |
              aws cloudformation deploy \
                --template-file cfn-template.yml \
                --stack-name udacity-udapeople-${CIRCLE_WORKFLOW_ID:0:5} \
                --region us-east-1
        - run: 
            name: "create inventory file"
            command: echo "[all]" > inventory
        - run:
            name: "add ip to inventory file"
            command: |
              aws cloudformation \
                --region us-east-1 \
                describe-stacks \
                --stack-name udacity-udapeople-${CIRCLE_WORKFLOW_ID:0:5} \
                --query "Stacks[0].Outputs[?OutputKey=='ec2PublicIP'].OutputValue" \
                --output text >> inventory
        - persist_to_workspace:
            root: .
            paths:
              - inventory
        - destroy_environment
  
  configure_infrastructure:
    docker: 
      - image: cimg/python:3.10.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - add_ssh_keys:
          fingerprints: ["a8:a3:cf:6f:38:04:c3:5c:8e:0a:70:ca:d8:77:11:68"]
      - run:
          name: "install ansible deps"
          command: pip install ansible
      - run:
          name: "configure server"
          command: ansible-playbook -i inventory playbook.yml

  smoke_test:
    docker:
      - image: cimg/base:2021.11
    steps:
      - run:
          name: "smoke test"
          command: |
            URL="https://blog.udacity.com/"
            # test website exists
            if curl -s --head ${URL}
            then
              exit 0
            else
              exit 1
            fi
  
  create_and_deploy_front_end: 
      executor: aws-cli/default
      steps:
        - checkout
        - aws-cli/setup
        - run:
            name: "create cloudformation stack - cfn-bucket.yml"
            command: |
              aws cloudformation deploy \
                --template-file cfn-bucket.yml \
                --stack-name udacity-udapeople-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
                --region us-east-1 \
                --parameter-overrides MyBucketName="udacity-udapeople-lb-public-bucket-${CIRCLE_WORKFLOW_ID:0:7}"
        - run: aws s3 sync . s3://udacity-udapeople-lb-public-bucket-${CIRCLE_WORKFLOW_ID:0:7} --delete
        - destroy_environment
  
  get_last_deployment_id:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: "fetch and save the old pipeline ID (bucket name) responsible for the last release."
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - textfile.txt 
  
  promote_to_production:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: "execute cloudfront.yml"
          command: |
            aws cloudformation deploy \
            --template-file cfn-cloudfront.yml \
            --stack-name production-distro \
            --parameter-overrides PipelineID="udacity-udapeople-lb-public-bucket-${CIRCLE_WORKFLOW_ID:0:7}"

  clean_up_old_front_end:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup
      - attach_workspace:
          at: ~/
      - run:
          name: "destroy the previous S3 bucket and CloudFormation stack."
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive

workflows:
  workflow:
    jobs:
      # - install
      # - test:
      #     requires:
      #       - install
      # - create_infrastructure:
      #     # requires:
      #     #   - test
      #     filters:
      #       branches:
      #         only:
      #           - "main"
      # - configure_infrastructure:
      #     requires:
      #       - create_infrastructure
      #     filters:
      #       branches:
      #         only:
      #           - "main"
      # - smoke_test
      - create_and_deploy_front_end  
      - get_last_deployment_id
      - promote_to_production:
          requires:
            - create_and_deploy_front_end
      - clean_up_old_front_end:
          requires:
            - promote_to_production
            - get_last_deployment_id